

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.ImageView;
import android.widget.TextView;

import com.ebabu.sellerbiz.R;
import com.ebabu.sellerbiz.activity.CatalogDetailActivity;
import com.ebabu.sellerbiz.constant.Constant;
import com.ebabu.sellerbiz.customview.CircularLoading;
import com.facebook.CallbackManager;
import com.facebook.FacebookSdk;
import com.facebook.internal.Utility;
import com.facebook.share.internal.ShareFeedContent;
import com.facebook.share.model.ShareContent;
import com.facebook.share.model.ShareHashtag;
import com.facebook.share.model.ShareLinkContent;
import com.facebook.share.model.SharePhoto;
import com.facebook.share.model.SharePhotoContent;
import com.facebook.share.widget.ShareDialog;
import com.squareup.picasso.Picasso;
import com.squareup.picasso.Target;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import static android.provider.CalendarContract.CalendarCache.URI;

public class ShareImageViaSocial {
    private int FACEBOOK_LIST_SIZE = 5;
    private String FACEBOOK_MESSENGER_PACKAGE = "com.facebook.orca";
    private String WHATSAPP_PACKAGE = "com.whatsapp";
    Context context;
    CircularLoading mCircularLoading;
    private ArrayList<Uri> mList = new ArrayList<>();
    String status = "", mDes;
    private ArrayList<String> mUrlList;
    private boolean mLoadingDone = false;
    int count = 0;
    private CallbackManager callbackManager;
    private List<SharePhoto> aaaa;
    ShareDialog shareDD;
    private boolean mShareTxt = false;
    Handler handler;

    public ShareImageViaSocial(Context mcontext, String mDes) {
        this.context = mcontext;
        this.mDes = mDes;
        FacebookSdk.sdkInitialize(context);
        shareDD = new ShareDialog((Activity) context);
        callbackManager = CallbackManager.Factory.create();
    }

    public void openDialogToShareImageVia(final ArrayList<String> url, final Context mcontext) {
        mUrlList = url;
        final Dialog dialog = new Dialog(mcontext);
        dialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);
        dialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
        View view = ((Activity) mcontext).getLayoutInflater().inflate(R.layout.layout_share_images, null);
        TextView tvclose = (TextView) view.findViewById(R.id.tvclose);
        TextView ivWhatsapp = (TextView) view.findViewById(R.id.ivWhatsapp);
        if (mUrlList != null && mUrlList.size() != 0) {
            tvclose.setText(Constant.SHAREIMAGES);
        } else {
            tvclose.setText(Constant.SHAREDESSCRIPTION);
        }
        ivWhatsapp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mUrlList != null && mUrlList.size() != 0) {
                    shareImageVia(1, url, mcontext);
                } else {
                    Intent i = new Intent(Intent.ACTION_SEND);
                    // i.setType("image/*");
                    i.setPackage(WHATSAPP_PACKAGE);
                    i.setType("text/plain");
                    i.putExtra(Intent.EXTRA_TEXT, mDes);
                    context.startActivity(Intent.createChooser(i, "Share"));
                  /*  Handler handler = new Handler();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {*/

                      /*  }
                    }, 500);*/
                }


            }
        });
        TextView ivMessenger = (TextView) view.findViewById(R.id.ivMessenger);
        ivMessenger.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mUrlList != null && mUrlList.size() != 0) {
                    shareImageVia(2, url, mcontext);
                } else {
                    Intent i = new Intent(Intent.ACTION_SEND);
                    // i.setType("image/*");
                    i.setPackage(FACEBOOK_MESSENGER_PACKAGE);
                    i.setType("text/plain");
                    i.putExtra(Intent.EXTRA_TEXT, mDes);
                    context.startActivity(Intent.createChooser(i, Constant.SHAREIMAGES));
                }
            }
        });
        TextView ivFb = (TextView) view.findViewById(R.id.ivFb);
        ivFb.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mUrlList != null && mUrlList.size() != 0) {
                    new AsyncCaller().execute();
                } else {
                    mCircularLoading = new CircularLoading(mcontext);
                    mCircularLoading.show(mcontext.getString(R.string.Please_wait));
                    if (mCircularLoading.isVisible() && mCircularLoading != null) {
                        handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                mCircularLoading.dismiss();
                            }
                        }, 3000);
                    }
                    ShareLinkContent text = new ShareLinkContent.Builder()
                            .setShareHashtag(new ShareHashtag.Builder()
                                    .setHashtag(mDes).build())
                            .build();
                    if (ShareDialog.canShow(ShareLinkContent.class)) {
                        shareDD.show(text);
                    }
                }

            }
        });

        tvclose.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog.dismiss();
            }
        });
        dialog.setContentView(view);
        dialog.getWindow().setLayout(-1, -2);
        dialog.setCancelable(false);
        dialog.show();
    }


    public void shareImageVia(final int type, final ArrayList<String> url, final Context context) {
        mCircularLoading = new CircularLoading(context);
        mCircularLoading.show(context.getString(R.string.Please_wait));
        mList = new ArrayList<>();
       /* for (int i=0;i<=url.size()-1;i++) {

            mList.add( Uri.parse(url.get(i)));
        }
        Intent i = new Intent(Intent.ACTION_SEND);
        i.setPackage(WHATSAPP_PACKAGE);
        i.setType("image/*");
        i.putExtra(Intent.EXTRA_STREAM, mList);
        context.startActivity(Intent.createChooser(i, "Share Image"));
*/
        mUrlList = url;
        for (int i = 0; i <= url.size() - 1; i++) {
            final int finalI = i;
            new DownloadImageTask(url.get(i),type).execute();
            /*Picasso.with(context).load(url.get(i)).into(new Target() {
                @Override
                public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
                    if (bitmap != null) {
                        Bitmap mBit = null;
                       *//* ByteArrayOutputStream datasecond = new ByteArrayOutputStream();
                         bitmap.compress(Bitmap.CompressFormat.JPEG, 100, datasecond);*//*
                        new LoadBitmapAsynTask(type, context, bitmap).execute();
                    }
                }

                @Override
                public void onBitmapFailed(Drawable errorDrawable) {
                    if (mCircularLoading != null)
                        mCircularLoading.dismiss();
                }


                @Override
                public void onPrepareLoad(Drawable placeHolderDrawable) {

                }
            });*/
        }

       /* Intent i = new Intent(Intent.ACTION_SEND);
        i.setType("image/*");
        i.putExtra(Intent.EXTRA_STREAM, mList);
        context.startActivity(Intent.createChooser(i, "Share Image"));*/

    }

    private class DownloadImageTask extends AsyncTask<String, Void, Void> {

        int mtype;
        String  murl;

        public DownloadImageTask(String url,int type) {
            mtype = type;
            murl=url;
        }


    @Override
    protected void onPreExecute() {
        super.onPreExecute();

       // mCircularLoading.show(context.getString(R.string.Please_wait));
    }

    @Override
    protected Void doInBackground(String... params) {
        getBase64(murl);
        return null;
    }

    @Override
    protected void onPostExecute(Void aVoid) {
        super.onPostExecute(aVoid);

        try {
            if (mUrlList.size() == 1) {
                Intent i = new Intent(Intent.ACTION_SEND);
                // i.setType("image/*");
                if (mtype == 1) {
                    i.setPackage(WHATSAPP_PACKAGE);
                    // i.putExtra(Intent.EXTRA_TITLE,"Testing Text");
                } else {
                    i.setPackage(FACEBOOK_MESSENGER_PACKAGE);
                }
                i.setType("image/*");
                   /* String[] mimetypes = {"image/*,text/plain"};
                    i.putExtra(Intent.EXTRA_MIME_TYPES, mimetypes);
                    i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);*/
                // i.setType("image/*,text/plain");
                i.putExtra(Intent.EXTRA_STREAM, mList);
                mLoadingDone = true;
                context.startActivity(Intent.createChooser(i, "Share"));
                if (mCircularLoading != null && mCircularLoading.isVisible()) {
                    mCircularLoading.dismiss();
                }
            } else {

                if (mUrlList.size() - 1 == mList.size() - 1) {
                     /*   Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {*/
                    Intent i = new Intent(Intent.ACTION_SEND);
                    i.setType("image/*");
                    i.putExtra(Intent.EXTRA_STREAM, mList);
                    if (mtype == 1) {
                        i.setPackage(WHATSAPP_PACKAGE);
                    } else {
                        i.setPackage(FACEBOOK_MESSENGER_PACKAGE);
                    }
                    context.startActivity(Intent.createChooser(i, "Share"));
                    count = 0;
                    mLoadingDone = true;
                    if (mCircularLoading != null && mCircularLoading.isVisible()) {
                        mCircularLoading.dismiss();
                    }
/*

                            }
                        }, 500);
*/

                }
            }

        } catch (Exception e) {
            if (mCircularLoading != null)
                mCircularLoading.dismiss();
            e.printStackTrace();
        }

        }
    }

    private void getBase64(final String image) {



            //for(int i=0;i<=advertise.getAds_image().size();i++)


            Bitmap object = getBitmapFromUrl(context, image);
            Log.d("Before Bitmap", object.getHeight() + " " + object.getWidth() + " " + object.getByteCount());
           // object = ConvetBitmap.Mytransform(object);
            ByteArrayOutputStream datasecond = new ByteArrayOutputStream();
            object.compress(Bitmap.CompressFormat.JPEG, 100, datasecond);
            Log.d("After Bitmap", object.getHeight() + " " + object.getWidth() + " " + object.getByteCount());
            String encodedString = Base64.encodeToString(datasecond.toByteArray(), Base64.DEFAULT);
        getLocalBitmapUri(object,context);
           /* ImageData imageData = new ImageData();
            imageData.setBitmap(object);
            imageData.setBytes(encodedString);
            imageData.setUrl(images);
            bitMapList.add(imageData);*/


       /* if (image.size() > 4) {

        } else {
            ImageData imageData = new ImageData();
            bitMapList.add(imageData);
        }*/
    }

    /*@Override
    protected void onPause() {
        super.onPause();
        Utils.showToast(context,"On Pause");
        if (mCircularLoading != null && mCircularLoading.isVisible()) {
            mCircularLoading.dismiss();
        }
    }*/
    public class LoadLocalBitmapUriAsynTask extends AsyncTask<Void, Void, Void> {
        Bitmap bmp;
        Context mcontext;

        public LoadLocalBitmapUriAsynTask(Bitmap bmp, Context mcontext) {
            this.bmp = bmp;
            this.mcontext = mcontext;
        }

        @Override
        protected Void doInBackground(Void... voids) {
            getLocalBitmapUri(bmp, mcontext);
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    public Uri getLocalBitmapUri(Bitmap bmp, Context context) {

       /* StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
        StrictMode.setVmPolicy(builder.build());*/
        Uri bmpUri = null;
        try {
            File file = new File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "share_image_" + System.currentTimeMillis() + ".jpeg");
            FileOutputStream out = new FileOutputStream(file);
            bmp.compress(Bitmap.CompressFormat.JPEG, 100, out);
            // bmp.compress(Bitmap.CompressFormat.PNG, 100, out);
            out.close();
            bmpUri = Uri.fromFile(file);
            mList.add(bmpUri);
            count++;

        } catch (IOException e) {
            if (mCircularLoading != null)
                mCircularLoading.dismiss();
            e.printStackTrace();
        }
        return bmpUri;
    }

    public Bitmap getBitmapFromUrl(Context context, String myUrl) {
        URL url = null;
        try {
            if (myUrl != null && !myUrl.isEmpty()) {
                url = new URL(myUrl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        Bitmap image = null;
        try {
            if (url != null) {
                image = BitmapFactory.decodeStream(url.openConnection().getInputStream());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (image == null) {
            image = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_launcher);
        }

        return image;
    }


    public class LoadBitmapAsynTask extends AsyncTask<Void, Void, Void> {
        Context mContext;
        Bitmap mBitmap;
        int mtype;


        public LoadBitmapAsynTask(int type, Context mcontext, Bitmap bitmap) {
            mContext = mcontext;
            mBitmap = bitmap;
            mtype = type;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
            try {
                if (mUrlList.size() == 1) {
                    Intent i = new Intent(Intent.ACTION_SEND);
                    // i.setType("image/*");
                    if (mtype == 1) {
                        i.setPackage(WHATSAPP_PACKAGE);
                        // i.putExtra(Intent.EXTRA_TITLE,"Testing Text");
                    } else {
                        i.setPackage(FACEBOOK_MESSENGER_PACKAGE);
                    }
                    i.setType("image/*");
                   /* String[] mimetypes = {"image/*,text/plain"};
                    i.putExtra(Intent.EXTRA_MIME_TYPES, mimetypes);
                    i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);*/
                    // i.setType("image/*,text/plain");
                    i.putExtra(Intent.EXTRA_STREAM, mList);
                    mLoadingDone = true;
                    context.startActivity(Intent.createChooser(i, "Share"));
                    if (mCircularLoading != null && mCircularLoading.isVisible()) {
                        mCircularLoading.dismiss();
                    }
                } else {

                    if (mUrlList.size() - 1 == mList.size() - 1) {
                     /*   Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {*/
                        Intent i = new Intent(Intent.ACTION_SEND);
                        i.setType("image/*");
                        i.putExtra(Intent.EXTRA_STREAM, mList);
                        if (mtype == 1) {
                            i.setPackage(WHATSAPP_PACKAGE);
                        } else {
                            i.setPackage(FACEBOOK_MESSENGER_PACKAGE);
                        }
                        context.startActivity(Intent.createChooser(i, "Share"));
                        count = 0;
                        mLoadingDone = true;
                        if (mCircularLoading != null && mCircularLoading.isVisible()) {
                            mCircularLoading.dismiss();
                        }
/*

                            }
                        }, 500);
*/

                    }
                }

            } catch (Exception e) {
                if (mCircularLoading != null)
                    mCircularLoading.dismiss();
                e.printStackTrace();
            }
        /*    if (mCircularLoading != null && mCircularLoading.isVisible())
                mCircularLoading.dismiss();*/

            //  }
          /*  if (mCircularLoading.isVisible())
                mCircularLoading.dismiss();*/
        }

        @Override
        protected Void doInBackground(Void... voids) {
            getLocalBitmapUri(mBitmap, context);
            // count++;
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }
    }

    private class AsyncCaller extends AsyncTask<Void, Void, Void> {
        Bitmap image;
        List<Bitmap> mBitmapList = new ArrayList<>();

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            mCircularLoading = new CircularLoading(context);
            mCircularLoading.show(context.getString(R.string.Please_wait));

        }

        @Override
        protected Void doInBackground(Void... params) {
            try {
                if (mUrlList != null && mUrlList.size() != 0) {
                    if (mUrlList.size() > FACEBOOK_LIST_SIZE) {
                        for (int i = 0; i <= FACEBOOK_LIST_SIZE; i++) {
                            mBitmapList.add(i, getBitmapFromURL(mUrlList.get(i)));
                        }
                    } else {
                        for (int i = 0; i <= mUrlList.size() - 1; i++) {
                            mBitmapList.add(i, getBitmapFromURL(mUrlList.get(i)));
                        }
                    }

                }
                // image = getBitmapFromURL(mUrlList.get(0));
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            super.onPostExecute(result);

            try {
                aaaa = new ArrayList<>();
                for (int i = 0; i <= mBitmapList.size() - 1; i++) {
                    SharePhoto photo = new SharePhoto.Builder()
                            .setBitmap(mBitmapList.get(i))
                            .build();
                    aaaa.add(i, photo);
                }

                if (ShareDialog.canShow(SharePhotoContent.class)) {
                    SharePhotoContent contentpp = new SharePhotoContent.Builder()
                            .addPhotos(aaaa)
                            .setShareHashtag(new ShareHashtag.Builder()
                                    .setHashtag(mDes).build())
                            .build();
                    shareDD.show(contentpp);
                }
                if (mCircularLoading.isVisible() && mCircularLoading != null) {
                    handler = new Handler();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            mCircularLoading.dismiss();
                        }
                    }, 3000);
                }

            } catch (Exception e) {
                System.out.println(e);
            }
            //this method will be running on UI thread

        }

    }

    public static Bitmap getBitmapFromURL(String src) {
        try {
            URL url = new URL(src);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoInput(true);
            connection.connect();
            InputStream input = connection.getInputStream();
            Bitmap myBitmap = BitmapFactory.decodeStream(input);
            return myBitmap;
        } catch (IOException e) {
            // Log exception
            return null;
        }
    }

}
